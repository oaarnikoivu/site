{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "virtualized-combobox",
  "type": "registry:component",
  "title": "shadcn/ui Virtualized Combobox",
  "description": "A virtualized shadcn/ui combobox.",
  "dependencies": [
    "@tanstack/react-virtual",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "command",
    "popover"
  ],
  "files": [
    {
      "path": "registry/oaarnikoivu/virtualized-combobox.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\nimport { useVirtualizer } from \"@tanstack/react-virtual\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\nimport * as React from \"react\";\n\ntype Option = {\n  value: string;\n  label: string;\n};\n\ninterface VirtualizedCommandProps {\n  height: string;\n  options: Option[];\n  placeholder: string;\n  selectedOption: string;\n  onSelectOption?: (option: string) => void;\n}\n\nconst VirtualizedCommand = ({\n  height,\n  options,\n  placeholder,\n  selectedOption,\n  onSelectOption,\n}: VirtualizedCommandProps) => {\n  const [filteredOptions, setFilteredOptions] =\n    React.useState<Option[]>(options);\n  const [focusedIndex, setFocusedIndex] = React.useState(0);\n  const [isKeyboardNavActive, setIsKeyboardNavActive] = React.useState(false);\n\n  const parentRef = React.useRef(null);\n\n  const virtualizer = useVirtualizer({\n    count: filteredOptions.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 35,\n  });\n\n  const virtualOptions = virtualizer.getVirtualItems();\n\n  const scrollToIndex = (index: number) => {\n    virtualizer.scrollToIndex(index, {\n      align: \"center\",\n    });\n  };\n\n  const handleSearch = (search: string) => {\n    setIsKeyboardNavActive(false);\n    setFilteredOptions(\n      options.filter((option) =>\n        option.value.toLowerCase().includes(search.toLowerCase() ?? []),\n      ),\n    );\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    switch (event.key) {\n      case \"ArrowDown\": {\n        event.preventDefault();\n        setIsKeyboardNavActive(true);\n        setFocusedIndex((prev) => {\n          const newIndex =\n            prev === -1 ? 0 : Math.min(prev + 1, filteredOptions.length - 1);\n          scrollToIndex(newIndex);\n          return newIndex;\n        });\n        break;\n      }\n      case \"ArrowUp\": {\n        event.preventDefault();\n        setIsKeyboardNavActive(true);\n        setFocusedIndex((prev) => {\n          const newIndex =\n            prev === -1 ? filteredOptions.length - 1 : Math.max(prev - 1, 0);\n          scrollToIndex(newIndex);\n          return newIndex;\n        });\n        break;\n      }\n      case \"Enter\": {\n        event.preventDefault();\n        if (filteredOptions[focusedIndex]) {\n          onSelectOption?.(filteredOptions[focusedIndex].value);\n        }\n        break;\n      }\n      default:\n        break;\n    }\n  };\n\n  React.useEffect(() => {\n    if (selectedOption) {\n      const option = filteredOptions.find(\n        (option) => option.value === selectedOption,\n      );\n      if (option) {\n        const index = filteredOptions.indexOf(option);\n        setFocusedIndex(index);\n        virtualizer.scrollToIndex(index, {\n          align: \"center\",\n        });\n      }\n    }\n  }, [selectedOption, filteredOptions, virtualizer]);\n\n  return (\n    <Command shouldFilter={false} onKeyDown={handleKeyDown}>\n      <CommandInput onValueChange={handleSearch} placeholder={placeholder} />\n      <CommandList\n        ref={parentRef}\n        style={{\n          height: height,\n          width: \"100%\",\n          overflow: \"auto\",\n        }}\n        onMouseDown={() => setIsKeyboardNavActive(false)}\n        onMouseMove={() => setIsKeyboardNavActive(false)}\n      >\n        <CommandEmpty>No item found.</CommandEmpty>\n        <CommandGroup>\n          <div\n            style={{\n              height: `${virtualizer.getTotalSize()}px`,\n              width: \"100%\",\n              position: \"relative\",\n            }}\n          >\n            {virtualOptions.map((virtualOption) => (\n              <CommandItem\n                key={filteredOptions[virtualOption.index].value}\n                disabled={isKeyboardNavActive}\n                className={cn(\n                  \"absolute left-0 top-0 w-full bg-transparent\",\n                  focusedIndex === virtualOption.index &&\n                    \"bg-accent text-accent-foreground\",\n                  isKeyboardNavActive &&\n                    focusedIndex !== virtualOption.index &&\n                    \"aria-selected:bg-transparent aria-selected:text-primary\",\n                )}\n                style={{\n                  height: `${virtualOption.size}px`,\n                  transform: `translateY(${virtualOption.start}px)`,\n                }}\n                value={filteredOptions[virtualOption.index].value}\n                onMouseEnter={() =>\n                  !isKeyboardNavActive && setFocusedIndex(virtualOption.index)\n                }\n                onMouseLeave={() => !isKeyboardNavActive && setFocusedIndex(-1)}\n                onSelect={onSelectOption}\n              >\n                <Check\n                  className={cn(\n                    \"mr-2 h-4 w-4\",\n                    selectedOption ===\n                      filteredOptions[virtualOption.index].value\n                      ? \"opacity-100\"\n                      : \"opacity-0\",\n                  )}\n                />\n                <span className=\"w-[300px] truncate\">\n                  {filteredOptions[virtualOption.index].label}\n                </span>\n              </CommandItem>\n            ))}\n          </div>\n        </CommandGroup>\n      </CommandList>\n    </Command>\n  );\n};\n\ninterface VirtualizedComboboxProps {\n  options: string[];\n  searchPlaceholder?: string;\n  width?: string;\n  height?: string;\n}\n\nexport function VirtualizedCombobox({\n  options,\n  searchPlaceholder = \"Search items...\",\n  width = \"400px\",\n  height = \"400px\",\n}: VirtualizedComboboxProps) {\n  const [open, setOpen] = React.useState(false);\n  const [selectedOption, setSelectedOption] = React.useState(\"\");\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"justify-between\"\n          style={{\n            width: width,\n          }}\n        >\n          <span className=\"truncate\">\n            {selectedOption\n              ? options.find((option) => option === selectedOption)\n              : searchPlaceholder}\n          </span>\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"p-0\" style={{ width: width }}>\n        <VirtualizedCommand\n          height={height}\n          options={options.map((option) => ({ value: option, label: option }))}\n          placeholder={searchPlaceholder}\n          selectedOption={selectedOption}\n          onSelectOption={(currentValue) => {\n            setSelectedOption(\n              currentValue === selectedOption ? \"\" : currentValue,\n            );\n            setOpen(false);\n          }}\n        />\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}